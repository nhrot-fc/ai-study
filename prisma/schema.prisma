// Prisma schema for polymorphic attachments and progress across Course/Chapter and Chapter/Content

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// Models
// ================================

model User {
  id            String    @id @default(uuid()) @db.Uuid
  nickname      String
  email         String    @unique
  password_hash String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  last_login_at DateTime?

  // Relations
  createdCourses Course[]     @relation("UserCreatedCourses")
  resources      Resource[]
  enrollments    Enrollment[]
  progresses     Progress[]
}

model Course {
  id             String    @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  created_by_id  String    @db.Uuid
  forked_from_id String?   @db.Uuid
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  // Relations
  created_by  User         @relation("UserCreatedCourses", fields: [created_by_id], references: [id], onDelete: Cascade)
  forked_from Course?      @relation("CourseFork", fields: [forked_from_id], references: [id])
  forks       Course[]     @relation("CourseFork")
  chapters    Chapter[]
  enrollments Enrollment[]
}

model Chapter {
  id          String    @id @default(uuid()) @db.Uuid
  course_id   String    @db.Uuid
  parent_id   String?   @db.Uuid
  title       String
  description String?
  order       Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  // Relations
  course   Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  parent   Chapter?  @relation("ChapterHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children Chapter[] @relation("ChapterHierarchy")
}

model Resource {
  id         String       @id @default(uuid()) @db.Uuid
  owner_id   String       @db.Uuid
  title      String
  type       ResourceType
  source_url String?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?

  // Relations
  owner       User         @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  contents    Content[]
  attachments Attachment[]
}

model Content {
  id          String    @id @default(uuid()) @db.Uuid
  resource_id String    @db.Uuid
  parent_id   String?   @db.Uuid
  title       String
  details     String?
  order       Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  // Relations
  resource Resource  @relation(fields: [resource_id], references: [id], onDelete: Cascade)
  parent   Content?  @relation("ContentHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children Content[] @relation("ContentHierarchy")
}

model Enrollment {
  user_id    String    @db.Uuid
  course_id  String    @db.Uuid
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([user_id, course_id])
}

// Polymorphic attachment: can attach a Resource to either a Course or a Chapter
model Attachment {
  id              String    @id @default(uuid()) @db.Uuid
  resource_id     String    @db.Uuid
  notes           String?
  attachable_id   String    @db.Uuid
  attachable_type String // "Course" or "Chapter"
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  // Relations
  resource Resource @relation(fields: [resource_id], references: [id], onDelete: Cascade)

  @@index([attachable_type, attachable_id])
}

// Polymorphic progress: can track progress for either a Chapter or a Content
model Progress {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String    @db.Uuid
  progress          Float     @default(0.0)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?
  progressable_id   String    @db.Uuid
  progressable_type String // "Chapter" or "Content"

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([progressable_type, progressable_id])
}

enum ResourceType {
  BOOK
  VIDEO
  PAPER
  LINK
  OTHER
}
