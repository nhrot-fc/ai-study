// Prisma schema with simplified course and resource structure using two separate tree hierarchies

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// Models
// ================================

model User {
  id            String    @id @default(uuid()) @db.Uuid
  nickname      String
  email         String    @unique
  password_hash String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  last_login_at DateTime?

  // Relations
  createdCourses            Course[]                  @relation("UserCreatedCourses")
  resources                 Resource[]
  enrollments               Enrollment[]
  courseProgresses          CourseProgress[]
  resourceProgresses        ResourceProgress[]
  courseSectionProgresses   CourseSectionProgress[]
  resourceSectionProgresses ResourceSectionProgress[]
}

model Course {
  id             String    @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  created_by_id  String    @db.Uuid
  forked_from_id String?   @db.Uuid
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  // Relations
  created_by       User             @relation("UserCreatedCourses", fields: [created_by_id], references: [id], onDelete: Cascade)
  forked_from      Course?          @relation("CourseFork", fields: [forked_from_id], references: [id])
  forks            Course[]         @relation("CourseFork")
  sections         CourseSection[]
  enrollments      Enrollment[]
  courseResources  CourseResource[]
  courseProgresses CourseProgress[]
}

model CourseSection {
  id          String    @id @default(uuid()) @db.Uuid
  course_id   String    @db.Uuid
  parent_id   String?   @db.Uuid
  title       String
  description String?
  order       Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  // Relations
  course                  Course                  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  parent                  CourseSection?          @relation("CourseSectionHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children                CourseSection[]         @relation("CourseSectionHierarchy")
  sectionAttachments      SectionAttachment[]
  courseSectionProgresses CourseSectionProgress[]
}

model Resource {
  id         String       @id @default(uuid()) @db.Uuid
  owner_id   String       @db.Uuid
  title      String
  type       ResourceType
  source_url String?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?

  // Relations
  owner              User               @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  sections           ResourceSection[]
  courseResources    CourseResource[]
  resourceProgresses ResourceProgress[]
}

model ResourceSection {
  id          String    @id @default(uuid()) @db.Uuid
  resource_id String    @db.Uuid
  parent_id   String?   @db.Uuid
  title       String
  description String?
  order       Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  // Relations
  resource                  Resource                  @relation(fields: [resource_id], references: [id], onDelete: Cascade)
  parent                    ResourceSection?          @relation("ResourceSectionHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children                  ResourceSection[]         @relation("ResourceSectionHierarchy")
  sectionAttachments        SectionAttachment[]
  resourceSectionProgresses ResourceSectionProgress[]
}

model Enrollment {
  user_id     String   @db.Uuid
  course_id   String   @db.Uuid
  is_starred  Boolean  @default(false)
  enrolled_at DateTime @default(now())

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([user_id, course_id])
}

// Linking a Course to a Resource as a general reference
model CourseResource {
  course_id   String @db.Uuid
  resource_id String @db.Uuid

  // Relations
  course   Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resource_id], references: [id], onDelete: Cascade)

  @@id([course_id, resource_id])
}

// Linking a specific course section to a specific resource section
model SectionAttachment {
  id                  String  @id @default(uuid()) @db.Uuid
  course_section_id   String  @db.Uuid
  resource_section_id String  @db.Uuid
  notes               String?

  // Relations
  courseSection   CourseSection   @relation(fields: [course_section_id], references: [id], onDelete: Cascade)
  resourceSection ResourceSection @relation(fields: [resource_section_id], references: [id], onDelete: Cascade)
}

// Course progress tracking
model CourseProgress {
  user_id    String   @db.Uuid
  course_id  String   @db.Uuid
  progress   Float    @default(0.0)
  updated_at DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([user_id, course_id])
}

// Resource progress tracking
model ResourceProgress {
  user_id     String   @db.Uuid
  resource_id String   @db.Uuid
  progress    Float    @default(0.0)
  updated_at  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resource_id], references: [id], onDelete: Cascade)

  @@id([user_id, resource_id])
}

// Course section progress tracking
model CourseSectionProgress {
  user_id           String   @db.Uuid
  course_section_id String   @db.Uuid
  progress          Float    @default(0.0)
  updated_at        DateTime @updatedAt

  // Relations
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  courseSection CourseSection @relation(fields: [course_section_id], references: [id])

  @@id([user_id, course_section_id])
}

// Resource section progress tracking
model ResourceSectionProgress {
  user_id             String   @db.Uuid
  resource_section_id String   @db.Uuid
  progress            Float    @default(0.0)
  updated_at          DateTime @updatedAt

  // Relations
  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  resourceSection ResourceSection @relation(fields: [resource_section_id], references: [id])

  @@id([user_id, resource_section_id])
}

enum ResourceType {
  BOOK
  VIDEO
  PAPER
  LINK
  OTHER
}
